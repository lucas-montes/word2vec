<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1222" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1205.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1205.00"> </text><svg id="frames" x="10" width="1180" total_samples="16109"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (96 samples, 0.60%)</title><rect x="0.0186%" y="517" width="0.5959%" height="15" fill="rgb(243,34,50)" fg:x="3" fg:w="96"/><text x="0.2686%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (96 samples, 0.60%)</title><rect x="0.0186%" y="501" width="0.5959%" height="15" fill="rgb(214,137,39)" fg:x="3" fg:w="96"/><text x="0.2686%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (96 samples, 0.60%)</title><rect x="0.0186%" y="485" width="0.5959%" height="15" fill="rgb(248,169,9)" fg:x="3" fg:w="96"/><text x="0.2686%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (96 samples, 0.60%)</title><rect x="0.0186%" y="469" width="0.5959%" height="15" fill="rgb(222,98,17)" fg:x="3" fg:w="96"/><text x="0.2686%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (96 samples, 0.60%)</title><rect x="0.0186%" y="453" width="0.5959%" height="15" fill="rgb(251,224,47)" fg:x="3" fg:w="96"/><text x="0.2686%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (96 samples, 0.60%)</title><rect x="0.0186%" y="437" width="0.5959%" height="15" fill="rgb(225,140,33)" fg:x="3" fg:w="96"/><text x="0.2686%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (314 samples, 1.95%)</title><rect x="0.6208%" y="453" width="1.9492%" height="15" fill="rgb(236,200,38)" fg:x="100" fg:w="314"/><text x="0.8708%" y="463.50">a..</text></g><g><title>core::ptr::write (314 samples, 1.95%)</title><rect x="0.6208%" y="437" width="1.9492%" height="15" fill="rgb(213,209,36)" fg:x="100" fg:w="314"/><text x="0.8708%" y="447.50">c..</text></g><g><title>__rustc::__rdl_alloc (4 samples, 0.02%)</title><rect x="2.5700%" y="325" width="0.0248%" height="15" fill="rgb(254,227,54)" fg:x="414" fg:w="4"/><text x="2.8200%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.02%)</title><rect x="2.5700%" y="309" width="0.0248%" height="15" fill="rgb(224,61,1)" fg:x="414" fg:w="4"/><text x="2.8200%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (28 samples, 0.17%)</title><rect x="2.5700%" y="453" width="0.1738%" height="15" fill="rgb(211,40,30)" fg:x="414" fg:w="28"/><text x="2.8200%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (28 samples, 0.17%)</title><rect x="2.5700%" y="437" width="0.1738%" height="15" fill="rgb(232,109,31)" fg:x="414" fg:w="28"/><text x="2.8200%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28 samples, 0.17%)</title><rect x="2.5700%" y="421" width="0.1738%" height="15" fill="rgb(218,189,22)" fg:x="414" fg:w="28"/><text x="2.8200%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (28 samples, 0.17%)</title><rect x="2.5700%" y="405" width="0.1738%" height="15" fill="rgb(226,89,37)" fg:x="414" fg:w="28"/><text x="2.8200%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (28 samples, 0.17%)</title><rect x="2.5700%" y="389" width="0.1738%" height="15" fill="rgb(233,193,49)" fg:x="414" fg:w="28"/><text x="2.8200%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.17%)</title><rect x="2.5700%" y="373" width="0.1738%" height="15" fill="rgb(213,37,10)" fg:x="414" fg:w="28"/><text x="2.8200%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.17%)</title><rect x="2.5700%" y="357" width="0.1738%" height="15" fill="rgb(212,214,40)" fg:x="414" fg:w="28"/><text x="2.8200%" y="367.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.17%)</title><rect x="2.5700%" y="341" width="0.1738%" height="15" fill="rgb(233,167,16)" fg:x="414" fg:w="28"/><text x="2.8200%" y="351.50"></text></g><g><title>malloc (24 samples, 0.15%)</title><rect x="2.5948%" y="325" width="0.1490%" height="15" fill="rgb(228,152,42)" fg:x="418" fg:w="24"/><text x="2.8448%" y="335.50"></text></g><g><title>rand_chacha::guts::refill_wide (2 samples, 0.01%)</title><rect x="2.8121%" y="261" width="0.0124%" height="15" fill="rgb(253,88,27)" fg:x="453" fg:w="2"/><text x="3.0621%" y="271.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (142 samples, 0.88%)</title><rect x="2.7438%" y="293" width="0.8815%" height="15" fill="rgb(249,175,21)" fg:x="442" fg:w="142"/><text x="2.9938%" y="303.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (142 samples, 0.88%)</title><rect x="2.7438%" y="277" width="0.8815%" height="15" fill="rgb(231,158,28)" fg:x="442" fg:w="142"/><text x="2.9938%" y="287.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (129 samples, 0.80%)</title><rect x="2.8245%" y="261" width="0.8008%" height="15" fill="rgb(254,116,16)" fg:x="455" fg:w="129"/><text x="3.0745%" y="271.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (129 samples, 0.80%)</title><rect x="2.8245%" y="245" width="0.8008%" height="15" fill="rgb(214,181,0)" fg:x="455" fg:w="129"/><text x="3.0745%" y="255.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (129 samples, 0.80%)</title><rect x="2.8245%" y="229" width="0.8008%" height="15" fill="rgb(230,163,12)" fg:x="455" fg:w="129"/><text x="3.0745%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (129 samples, 0.80%)</title><rect x="2.8245%" y="213" width="0.8008%" height="15" fill="rgb(225,222,32)" fg:x="455" fg:w="129"/><text x="3.0745%" y="223.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (129 samples, 0.80%)</title><rect x="2.8245%" y="197" width="0.8008%" height="15" fill="rgb(251,105,20)" fg:x="455" fg:w="129"/><text x="3.0745%" y="207.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (4 samples, 0.02%)</title><rect x="3.6315%" y="293" width="0.0248%" height="15" fill="rgb(248,183,36)" fg:x="585" fg:w="4"/><text x="3.8815%" y="303.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed (4 samples, 0.02%)</title><rect x="3.6315%" y="277" width="0.0248%" height="15" fill="rgb(214,203,6)" fg:x="585" fg:w="4"/><text x="3.8815%" y="287.50"></text></g><g><title>rand_core::SeedableRng::from_rng (4 samples, 0.02%)</title><rect x="3.6315%" y="261" width="0.0248%" height="15" fill="rgb(238,74,35)" fg:x="585" fg:w="4"/><text x="3.8815%" y="271.50"></text></g><g><title>&lt;&amp;mut R as rand_core::RngCore&gt;::try_fill_bytes (4 samples, 0.02%)</title><rect x="3.6315%" y="245" width="0.0248%" height="15" fill="rgb(235,24,3)" fg:x="585" fg:w="4"/><text x="3.8815%" y="255.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (4 samples, 0.02%)</title><rect x="3.6315%" y="229" width="0.0248%" height="15" fill="rgb(223,130,7)" fg:x="585" fg:w="4"/><text x="3.8815%" y="239.50"></text></g><g><title>getrandom::getrandom (4 samples, 0.02%)</title><rect x="3.6315%" y="213" width="0.0248%" height="15" fill="rgb(251,67,18)" fg:x="585" fg:w="4"/><text x="3.8815%" y="223.50"></text></g><g><title>getrandom::getrandom_uninit (4 samples, 0.02%)</title><rect x="3.6315%" y="197" width="0.0248%" height="15" fill="rgb(205,225,5)" fg:x="585" fg:w="4"/><text x="3.8815%" y="207.50"></text></g><g><title>getrandom::imp::getrandom_inner (4 samples, 0.02%)</title><rect x="3.6315%" y="181" width="0.0248%" height="15" fill="rgb(208,181,4)" fg:x="585" fg:w="4"/><text x="3.8815%" y="191.50"></text></g><g><title>getrandom::util_libc::sys_fill_exact (4 samples, 0.02%)</title><rect x="3.6315%" y="165" width="0.0248%" height="15" fill="rgb(246,160,45)" fg:x="585" fg:w="4"/><text x="3.8815%" y="175.50"></text></g><g><title>core::ops::function::Fn::call (3 samples, 0.02%)</title><rect x="3.6377%" y="149" width="0.0186%" height="15" fill="rgb(210,150,20)" fg:x="586" fg:w="3"/><text x="3.8877%" y="159.50"></text></g><g><title>getrandom::util_libc::getrandom_syscall (3 samples, 0.02%)</title><rect x="3.6377%" y="133" width="0.0186%" height="15" fill="rgb(207,203,40)" fg:x="586" fg:w="3"/><text x="3.8877%" y="143.50"></text></g><g><title>syscall (3 samples, 0.02%)</title><rect x="3.6377%" y="117" width="0.0186%" height="15" fill="rgb(225,43,28)" fg:x="586" fg:w="3"/><text x="3.8877%" y="127.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::choose_multiple (491 samples, 3.05%)</title><rect x="0.6146%" y="501" width="3.0480%" height="15" fill="rgb(244,100,14)" fg:x="99" fg:w="491"/><text x="0.8646%" y="511.50">&lt;[T..</text></g><g><title>rand::seq::index::sample (491 samples, 3.05%)</title><rect x="0.6146%" y="485" width="3.0480%" height="15" fill="rgb(216,135,52)" fg:x="99" fg:w="491"/><text x="0.8646%" y="495.50">ran..</text></g><g><title>rand::seq::index::sample_floyd (491 samples, 3.05%)</title><rect x="0.6146%" y="469" width="3.0480%" height="15" fill="rgb(205,52,53)" fg:x="99" fg:w="491"/><text x="0.8646%" y="479.50">ran..</text></g><g><title>rand::rng::Rng::gen_range (148 samples, 0.92%)</title><rect x="2.7438%" y="453" width="0.9187%" height="15" fill="rgb(210,61,11)" fg:x="442" fg:w="148"/><text x="2.9938%" y="463.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (148 samples, 0.92%)</title><rect x="2.7438%" y="437" width="0.9187%" height="15" fill="rgb(225,115,5)" fg:x="442" fg:w="148"/><text x="2.9938%" y="447.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (148 samples, 0.92%)</title><rect x="2.7438%" y="421" width="0.9187%" height="15" fill="rgb(216,4,26)" fg:x="442" fg:w="148"/><text x="2.9938%" y="431.50"></text></g><g><title>rand::rng::Rng::gen (148 samples, 0.92%)</title><rect x="2.7438%" y="405" width="0.9187%" height="15" fill="rgb(232,10,3)" fg:x="442" fg:w="148"/><text x="2.9938%" y="415.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (148 samples, 0.92%)</title><rect x="2.7438%" y="389" width="0.9187%" height="15" fill="rgb(216,167,16)" fg:x="442" fg:w="148"/><text x="2.9938%" y="399.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (148 samples, 0.92%)</title><rect x="2.7438%" y="373" width="0.9187%" height="15" fill="rgb(221,38,29)" fg:x="442" fg:w="148"/><text x="2.9938%" y="383.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (148 samples, 0.92%)</title><rect x="2.7438%" y="357" width="0.9187%" height="15" fill="rgb(235,77,25)" fg:x="442" fg:w="148"/><text x="2.9938%" y="367.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (148 samples, 0.92%)</title><rect x="2.7438%" y="341" width="0.9187%" height="15" fill="rgb(236,74,46)" fg:x="442" fg:w="148"/><text x="2.9938%" y="351.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (148 samples, 0.92%)</title><rect x="2.7438%" y="325" width="0.9187%" height="15" fill="rgb(223,63,41)" fg:x="442" fg:w="148"/><text x="2.9938%" y="335.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (148 samples, 0.92%)</title><rect x="2.7438%" y="309" width="0.9187%" height="15" fill="rgb(215,131,15)" fg:x="442" fg:w="148"/><text x="2.9938%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (13,644 samples, 84.70%)</title><rect x="3.6625%" y="501" width="84.6980%" height="15" fill="rgb(224,2,10)" fg:x="590" fg:w="13644"/><text x="3.9125%" y="511.50">core::iter::traits::iterator::Iterator::sum</text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (13,644 samples, 84.70%)</title><rect x="3.6625%" y="485" width="84.6980%" height="15" fill="rgb(217,213,40)" fg:x="590" fg:w="13644"/><text x="3.9125%" y="495.50">&lt;f32 as core::iter::traits::accum::Sum&gt;::sum</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13,644 samples, 84.70%)</title><rect x="3.6625%" y="469" width="84.6980%" height="15" fill="rgb(215,215,10)" fg:x="590" fg:w="13644"/><text x="3.9125%" y="479.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13,644 samples, 84.70%)</title><rect x="3.6625%" y="453" width="84.6980%" height="15" fill="rgb(244,134,52)" fg:x="590" fg:w="13644"/><text x="3.9125%" y="463.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13,644 samples, 84.70%)</title><rect x="3.6625%" y="437" width="84.6980%" height="15" fill="rgb(235,40,35)" fg:x="590" fg:w="13644"/><text x="3.9125%" y="447.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (13,644 samples, 84.70%)</title><rect x="3.6625%" y="421" width="84.6980%" height="15" fill="rgb(228,10,34)" fg:x="590" fg:w="13644"/><text x="3.9125%" y="431.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (13,644 samples, 84.70%)</title><rect x="3.6625%" y="405" width="84.6980%" height="15" fill="rgb(240,185,38)" fg:x="590" fg:w="13644"/><text x="3.9125%" y="415.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (13,644 samples, 84.70%)</title><rect x="3.6625%" y="389" width="84.6980%" height="15" fill="rgb(228,83,22)" fg:x="590" fg:w="13644"/><text x="3.9125%" y="399.50">&lt;f32 as core::iter::traits::accum::Sum&gt;::sum::{{closure}}</text></g><g><title>__rustc::__rdl_dealloc (4 samples, 0.02%)</title><rect x="88.3605%" y="437" width="0.0248%" height="15" fill="rgb(230,89,20)" fg:x="14234" fg:w="4"/><text x="88.6105%" y="447.50"></text></g><g><title>_mid_memalign.isra.0 (4 samples, 0.02%)</title><rect x="88.3854%" y="437" width="0.0248%" height="15" fill="rgb(207,115,26)" fg:x="14238" fg:w="4"/><text x="88.6354%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::take::Take&lt;core::iter::adapters::filter::Filter&lt;rand::seq::SliceChooseIter&lt;[usize],usize&gt;,word2vec::algo::pass::{{closure}}&gt;&gt;&gt; (78 samples, 0.48%)</title><rect x="88.3605%" y="501" width="0.4842%" height="15" fill="rgb(207,173,35)" fg:x="14234" fg:w="78"/><text x="88.6105%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter::Filter&lt;rand::seq::SliceChooseIter&lt;[usize],usize&gt;,word2vec::algo::pass::{{closure}}&gt;&gt; (78 samples, 0.48%)</title><rect x="88.3605%" y="485" width="0.4842%" height="15" fill="rgb(244,132,19)" fg:x="14234" fg:w="78"/><text x="88.6105%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;rand::seq::SliceChooseIter&lt;[usize],usize&gt;&gt; (78 samples, 0.48%)</title><rect x="88.3605%" y="469" width="0.4842%" height="15" fill="rgb(234,5,21)" fg:x="14234" fg:w="78"/><text x="88.6105%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;rand::seq::index::IndexVecIntoIter&gt; (78 samples, 0.48%)</title><rect x="88.3605%" y="453" width="0.4842%" height="15" fill="rgb(226,141,13)" fg:x="14234" fg:w="78"/><text x="88.6105%" y="463.50"></text></g><g><title>free (70 samples, 0.43%)</title><rect x="88.4102%" y="437" width="0.4345%" height="15" fill="rgb(249,96,47)" fg:x="14242" fg:w="70"/><text x="88.6602%" y="447.50"></text></g><g><title>_int_free (42 samples, 0.26%)</title><rect x="88.5840%" y="421" width="0.2607%" height="15" fill="rgb(214,190,48)" fg:x="14270" fg:w="42"/><text x="88.8340%" y="431.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::ln (589 samples, 3.66%)</title><rect x="88.8447%" y="501" width="3.6563%" height="15" fill="rgb(227,205,50)" fg:x="14312" fg:w="589"/><text x="89.0947%" y="511.50">std:..</text></g><g><title>__logf_fma (553 samples, 3.43%)</title><rect x="89.0682%" y="485" width="3.4329%" height="15" fill="rgb(221,119,6)" fg:x="14348" fg:w="553"/><text x="89.3182%" y="495.50">__l..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (15,446 samples, 95.88%)</title><rect x="0.0062%" y="565" width="95.8843%" height="15" fill="rgb(236,191,3)" fg:x="1" fg:w="15446"/><text x="0.2562%" y="575.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>w2v_bench::bench::{{closure}}::{{closure}} (15,446 samples, 95.88%)</title><rect x="0.0062%" y="549" width="95.8843%" height="15" fill="rgb(230,124,49)" fg:x="1" fg:w="15446"/><text x="0.2562%" y="559.50">w2v_bench::bench::{{closure}}::{{closure}}</text></g><g><title>word2vec::algo::train (15,446 samples, 95.88%)</title><rect x="0.0062%" y="533" width="95.8843%" height="15" fill="rgb(216,78,26)" fg:x="1" fg:w="15446"/><text x="0.2562%" y="543.50">word2vec::algo::train</text></g><g><title>word2vec::algo::pass (15,348 samples, 95.28%)</title><rect x="0.6146%" y="517" width="95.2759%" height="15" fill="rgb(222,103,32)" fg:x="99" fg:w="15348"/><text x="0.8646%" y="527.50">word2vec::algo::pass</text></g><g><title>word2vec::algo::sigmoid (546 samples, 3.39%)</title><rect x="92.5011%" y="501" width="3.3894%" height="15" fill="rgb(237,115,51)" fg:x="14901" fg:w="546"/><text x="92.7511%" y="511.50">wor..</text></g><g><title>std::f32::&lt;impl f32&gt;::exp (546 samples, 3.39%)</title><rect x="92.5011%" y="485" width="3.3894%" height="15" fill="rgb(206,24,1)" fg:x="14901" fg:w="546"/><text x="92.7511%" y="495.50">std..</text></g><g><title>__expf_fma (546 samples, 3.39%)</title><rect x="92.5011%" y="469" width="3.3894%" height="15" fill="rgb(244,87,28)" fg:x="14901" fg:w="546"/><text x="92.7511%" y="479.50">__e..</text></g><g><title>word2vec::algo::CBOWParams::create_matrices (3 samples, 0.02%)</title><rect x="95.8905%" y="565" width="0.0186%" height="15" fill="rgb(228,221,18)" fg:x="15447" fg:w="3"/><text x="96.1405%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.02%)</title><rect x="95.8905%" y="549" width="0.0186%" height="15" fill="rgb(230,59,18)" fg:x="15447" fg:w="3"/><text x="96.1405%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="95.8905%" y="533" width="0.0186%" height="15" fill="rgb(222,32,4)" fg:x="15447" fg:w="3"/><text x="96.1405%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="95.8905%" y="517" width="0.0186%" height="15" fill="rgb(252,43,7)" fg:x="15447" fg:w="3"/><text x="96.1405%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="95.8905%" y="501" width="0.0186%" height="15" fill="rgb(244,13,15)" fg:x="15447" fg:w="3"/><text x="96.1405%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="95.8905%" y="485" width="0.0186%" height="15" fill="rgb(242,193,49)" fg:x="15447" fg:w="3"/><text x="96.1405%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3 samples, 0.02%)</title><rect x="95.8905%" y="469" width="0.0186%" height="15" fill="rgb(224,199,24)" fg:x="15447" fg:w="3"/><text x="96.1405%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="95.8905%" y="453" width="0.0186%" height="15" fill="rgb(235,44,2)" fg:x="15447" fg:w="3"/><text x="96.1405%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="95.8967%" y="437" width="0.0124%" height="15" fill="rgb(219,40,20)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="95.8967%" y="421" width="0.0124%" height="15" fill="rgb(252,161,48)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (2 samples, 0.01%)</title><rect x="95.8967%" y="405" width="0.0124%" height="15" fill="rgb(233,151,34)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="95.8967%" y="389" width="0.0124%" height="15" fill="rgb(236,104,52)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="95.8967%" y="373" width="0.0124%" height="15" fill="rgb(218,54,16)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.01%)</title><rect x="95.8967%" y="357" width="0.0124%" height="15" fill="rgb(236,185,44)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="367.50"></text></g><g><title>word2vec::algo::CBOWParams::create_matrices::{{closure}} (2 samples, 0.01%)</title><rect x="95.8967%" y="341" width="0.0124%" height="15" fill="rgb(207,0,3)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.01%)</title><rect x="95.8967%" y="325" width="0.0124%" height="15" fill="rgb(240,62,10)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="95.8967%" y="309" width="0.0124%" height="15" fill="rgb(235,60,0)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="95.8967%" y="293" width="0.0124%" height="15" fill="rgb(235,56,50)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="95.8967%" y="277" width="0.0124%" height="15" fill="rgb(214,183,4)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.01%)</title><rect x="95.8967%" y="261" width="0.0124%" height="15" fill="rgb(231,157,11)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.01%)</title><rect x="95.8967%" y="245" width="0.0124%" height="15" fill="rgb(222,133,13)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.01%)</title><rect x="95.8967%" y="229" width="0.0124%" height="15" fill="rgb(235,63,25)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="95.8967%" y="213" width="0.0124%" height="15" fill="rgb(222,3,35)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.01%)</title><rect x="95.8967%" y="197" width="0.0124%" height="15" fill="rgb(252,213,17)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="207.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 0.01%)</title><rect x="95.8967%" y="181" width="0.0124%" height="15" fill="rgb(244,182,37)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="191.50"></text></g><g><title>word2vec::algo::CBOWParams::create_matrices::{{closure}}::{{closure}} (2 samples, 0.01%)</title><rect x="95.8967%" y="165" width="0.0124%" height="15" fill="rgb(215,48,22)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="175.50"></text></g><g><title>&lt;rand_distr::normal::Normal&lt;F&gt; as rand::distributions::distribution::Distribution&lt;F&gt;&gt;::sample (2 samples, 0.01%)</title><rect x="95.8967%" y="149" width="0.0124%" height="15" fill="rgb(243,169,32)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="159.50"></text></g><g><title>rand::rng::Rng::sample (2 samples, 0.01%)</title><rect x="95.8967%" y="133" width="0.0124%" height="15" fill="rgb(245,165,4)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="143.50"></text></g><g><title>&lt;rand_distr::normal::StandardNormal as rand::distributions::distribution::Distribution&lt;f32&gt;&gt;::sample (2 samples, 0.01%)</title><rect x="95.8967%" y="117" width="0.0124%" height="15" fill="rgb(237,103,23)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="127.50"></text></g><g><title>&lt;rand_distr::normal::StandardNormal as rand::distributions::distribution::Distribution&lt;f64&gt;&gt;::sample (2 samples, 0.01%)</title><rect x="95.8967%" y="101" width="0.0124%" height="15" fill="rgb(205,102,53)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="111.50"></text></g><g><title>rand_distr::utils::ziggurat (2 samples, 0.01%)</title><rect x="95.8967%" y="85" width="0.0124%" height="15" fill="rgb(216,65,38)" fg:x="15448" fg:w="2"/><text x="96.1467%" y="95.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (15,451 samples, 95.92%)</title><rect x="0.0000%" y="789" width="95.9153%" height="15" fill="rgb(219,182,45)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench</text></g><g><title>core::iter::traits::iterator::Iterator::collect (15,451 samples, 95.92%)</title><rect x="0.0000%" y="773" width="95.9153%" height="15" fill="rgb(253,95,4)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="783.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (15,451 samples, 95.92%)</title><rect x="0.0000%" y="757" width="95.9153%" height="15" fill="rgb(211,116,40)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15,451 samples, 95.92%)</title><rect x="0.0000%" y="741" width="95.9153%" height="15" fill="rgb(254,227,48)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="751.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (15,451 samples, 95.92%)</title><rect x="0.0000%" y="725" width="95.9153%" height="15" fill="rgb(217,67,35)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15,451 samples, 95.92%)</title><rect x="0.0000%" y="709" width="95.9153%" height="15" fill="rgb(222,154,53)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="719.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (15,451 samples, 95.92%)</title><rect x="0.0000%" y="693" width="95.9153%" height="15" fill="rgb(239,134,28)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="703.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15,451 samples, 95.92%)</title><rect x="0.0000%" y="677" width="95.9153%" height="15" fill="rgb(249,56,46)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="687.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15,451 samples, 95.92%)</title><rect x="0.0000%" y="661" width="95.9153%" height="15" fill="rgb(207,211,0)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="671.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15,451 samples, 95.92%)</title><rect x="0.0000%" y="645" width="95.9153%" height="15" fill="rgb(224,96,8)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="655.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (15,451 samples, 95.92%)</title><rect x="0.0000%" y="629" width="95.9153%" height="15" fill="rgb(249,113,43)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="639.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (15,451 samples, 95.92%)</title><rect x="0.0000%" y="613" width="95.9153%" height="15" fill="rgb(222,119,48)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="623.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}}</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (15,451 samples, 95.92%)</title><rect x="0.0000%" y="597" width="95.9153%" height="15" fill="rgb(229,173,20)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="607.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}}</text></g><g><title>w2v_bench::bench::{{closure}} (15,451 samples, 95.92%)</title><rect x="0.0000%" y="581" width="95.9153%" height="15" fill="rgb(237,52,16)" fg:x="0" fg:w="15451"/><text x="0.2500%" y="591.50">w2v_bench::bench::{{closure}}</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.04%)</title><rect x="95.9277%" y="693" width="0.0435%" height="15" fill="rgb(237,192,22)" fg:x="15453" fg:w="7"/><text x="96.1777%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (7 samples, 0.04%)</title><rect x="95.9277%" y="677" width="0.0435%" height="15" fill="rgb(251,69,0)" fg:x="15453" fg:w="7"/><text x="96.1777%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (7 samples, 0.04%)</title><rect x="95.9277%" y="661" width="0.0435%" height="15" fill="rgb(224,106,23)" fg:x="15453" fg:w="7"/><text x="96.1777%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7 samples, 0.04%)</title><rect x="95.9277%" y="645" width="0.0435%" height="15" fill="rgb(228,103,17)" fg:x="15453" fg:w="7"/><text x="96.1777%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (7 samples, 0.04%)</title><rect x="95.9277%" y="629" width="0.0435%" height="15" fill="rgb(244,130,23)" fg:x="15453" fg:w="7"/><text x="96.1777%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (7 samples, 0.04%)</title><rect x="95.9277%" y="613" width="0.0435%" height="15" fill="rgb(249,156,34)" fg:x="15453" fg:w="7"/><text x="96.1777%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 0.11%)</title><rect x="95.9712%" y="629" width="0.1055%" height="15" fill="rgb(221,215,27)" fg:x="15460" fg:w="17"/><text x="96.2212%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.11%)</title><rect x="95.9712%" y="613" width="0.1055%" height="15" fill="rgb(215,110,23)" fg:x="15460" fg:w="17"/><text x="96.2212%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.11%)</title><rect x="95.9712%" y="597" width="0.1055%" height="15" fill="rgb(252,102,26)" fg:x="15460" fg:w="17"/><text x="96.2212%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (17 samples, 0.11%)</title><rect x="95.9712%" y="581" width="0.1055%" height="15" fill="rgb(246,32,24)" fg:x="15460" fg:w="17"/><text x="96.2212%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (17 samples, 0.11%)</title><rect x="95.9712%" y="565" width="0.1055%" height="15" fill="rgb(240,97,25)" fg:x="15460" fg:w="17"/><text x="96.2212%" y="575.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::choose_multiple (25 samples, 0.16%)</title><rect x="95.9712%" y="677" width="0.1552%" height="15" fill="rgb(218,98,14)" fg:x="15460" fg:w="25"/><text x="96.2212%" y="687.50"></text></g><g><title>rand::seq::index::sample (25 samples, 0.16%)</title><rect x="95.9712%" y="661" width="0.1552%" height="15" fill="rgb(232,71,37)" fg:x="15460" fg:w="25"/><text x="96.2212%" y="671.50"></text></g><g><title>rand::seq::index::sample_floyd (25 samples, 0.16%)</title><rect x="95.9712%" y="645" width="0.1552%" height="15" fill="rgb(213,5,46)" fg:x="15460" fg:w="25"/><text x="96.2212%" y="655.50"></text></g><g><title>rand::rng::Rng::gen_range (8 samples, 0.05%)</title><rect x="96.0767%" y="629" width="0.0497%" height="15" fill="rgb(211,30,6)" fg:x="15477" fg:w="8"/><text x="96.3267%" y="639.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (8 samples, 0.05%)</title><rect x="96.0767%" y="613" width="0.0497%" height="15" fill="rgb(225,134,54)" fg:x="15477" fg:w="8"/><text x="96.3267%" y="623.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (8 samples, 0.05%)</title><rect x="96.0767%" y="597" width="0.0497%" height="15" fill="rgb(253,75,2)" fg:x="15477" fg:w="8"/><text x="96.3267%" y="607.50"></text></g><g><title>rand::rng::Rng::gen (8 samples, 0.05%)</title><rect x="96.0767%" y="581" width="0.0497%" height="15" fill="rgb(246,215,21)" fg:x="15477" fg:w="8"/><text x="96.3267%" y="591.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (8 samples, 0.05%)</title><rect x="96.0767%" y="565" width="0.0497%" height="15" fill="rgb(224,48,9)" fg:x="15477" fg:w="8"/><text x="96.3267%" y="575.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (8 samples, 0.05%)</title><rect x="96.0767%" y="549" width="0.0497%" height="15" fill="rgb(242,203,30)" fg:x="15477" fg:w="8"/><text x="96.3267%" y="559.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (8 samples, 0.05%)</title><rect x="96.0767%" y="533" width="0.0497%" height="15" fill="rgb(211,67,49)" fg:x="15477" fg:w="8"/><text x="96.3267%" y="543.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (8 samples, 0.05%)</title><rect x="96.0767%" y="517" width="0.0497%" height="15" fill="rgb(205,53,37)" fg:x="15477" fg:w="8"/><text x="96.3267%" y="527.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (8 samples, 0.05%)</title><rect x="96.0767%" y="501" width="0.0497%" height="15" fill="rgb(245,15,5)" fg:x="15477" fg:w="8"/><text x="96.3267%" y="511.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (8 samples, 0.05%)</title><rect x="96.0767%" y="485" width="0.0497%" height="15" fill="rgb(220,192,16)" fg:x="15477" fg:w="8"/><text x="96.3267%" y="495.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (8 samples, 0.05%)</title><rect x="96.0767%" y="469" width="0.0497%" height="15" fill="rgb(224,89,22)" fg:x="15477" fg:w="8"/><text x="96.3267%" y="479.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (8 samples, 0.05%)</title><rect x="96.0767%" y="453" width="0.0497%" height="15" fill="rgb(223,207,23)" fg:x="15477" fg:w="8"/><text x="96.3267%" y="463.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (7 samples, 0.04%)</title><rect x="96.0829%" y="437" width="0.0435%" height="15" fill="rgb(225,121,9)" fg:x="15478" fg:w="7"/><text x="96.3329%" y="447.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (7 samples, 0.04%)</title><rect x="96.0829%" y="421" width="0.0435%" height="15" fill="rgb(250,105,24)" fg:x="15478" fg:w="7"/><text x="96.3329%" y="431.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (7 samples, 0.04%)</title><rect x="96.0829%" y="405" width="0.0435%" height="15" fill="rgb(225,160,51)" fg:x="15478" fg:w="7"/><text x="96.3329%" y="415.50"></text></g><g><title>rand_chacha::guts::round (7 samples, 0.04%)</title><rect x="96.0829%" y="389" width="0.0435%" height="15" fill="rgb(211,186,45)" fg:x="15478" fg:w="7"/><text x="96.3329%" y="399.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (7 samples, 0.04%)</title><rect x="96.0829%" y="373" width="0.0435%" height="15" fill="rgb(209,136,27)" fg:x="15478" fg:w="7"/><text x="96.3329%" y="383.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (7 samples, 0.04%)</title><rect x="96.0829%" y="357" width="0.0435%" height="15" fill="rgb(205,105,30)" fg:x="15478" fg:w="7"/><text x="96.3329%" y="367.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (7 samples, 0.04%)</title><rect x="96.0829%" y="341" width="0.0435%" height="15" fill="rgb(248,73,15)" fg:x="15478" fg:w="7"/><text x="96.3329%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (574 samples, 3.56%)</title><rect x="96.1264%" y="677" width="3.5632%" height="15" fill="rgb(219,174,30)" fg:x="15485" fg:w="574"/><text x="96.3764%" y="687.50">&lt;cor..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (574 samples, 3.56%)</title><rect x="96.1264%" y="661" width="3.5632%" height="15" fill="rgb(207,200,4)" fg:x="15485" fg:w="574"/><text x="96.3764%" y="671.50">&lt;cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::take::Take&lt;core::iter::adapters::filter::Filter&lt;rand::seq::SliceChooseIter&lt;[usize],usize&gt;,word2vec::algo::pass::{{closure}}&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="99.6896%" y="677" width="0.0124%" height="15" fill="rgb(244,103,12)" fg:x="16059" fg:w="2"/><text x="99.9396%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter::Filter&lt;rand::seq::SliceChooseIter&lt;[usize],usize&gt;,word2vec::algo::pass::{{closure}}&gt;&gt; (2 samples, 0.01%)</title><rect x="99.6896%" y="661" width="0.0124%" height="15" fill="rgb(218,88,32)" fg:x="16059" fg:w="2"/><text x="99.9396%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;rand::seq::SliceChooseIter&lt;[usize],usize&gt;&gt; (2 samples, 0.01%)</title><rect x="99.6896%" y="645" width="0.0124%" height="15" fill="rgb(229,140,33)" fg:x="16059" fg:w="2"/><text x="99.9396%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;rand::seq::index::IndexVecIntoIter&gt; (2 samples, 0.01%)</title><rect x="99.6896%" y="629" width="0.0124%" height="15" fill="rgb(205,151,49)" fg:x="16059" fg:w="2"/><text x="99.9396%" y="639.50"></text></g><g><title>free (2 samples, 0.01%)</title><rect x="99.6896%" y="613" width="0.0124%" height="15" fill="rgb(250,187,52)" fg:x="16059" fg:w="2"/><text x="99.9396%" y="623.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::ln (24 samples, 0.15%)</title><rect x="99.7020%" y="677" width="0.1490%" height="15" fill="rgb(233,136,23)" fg:x="16061" fg:w="24"/><text x="99.9520%" y="687.50"></text></g><g><title>__logf_fma (24 samples, 0.15%)</title><rect x="99.7020%" y="661" width="0.1490%" height="15" fill="rgb(236,162,34)" fg:x="16061" fg:w="24"/><text x="99.9520%" y="671.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (650 samples, 4.04%)</title><rect x="95.9215%" y="741" width="4.0350%" height="15" fill="rgb(240,84,42)" fg:x="15452" fg:w="650"/><text x="96.1715%" y="751.50">crit..</text></g><g><title>w2v_bench::bench::{{closure}}::{{closure}} (650 samples, 4.04%)</title><rect x="95.9215%" y="725" width="4.0350%" height="15" fill="rgb(206,115,43)" fg:x="15452" fg:w="650"/><text x="96.1715%" y="735.50">w2v_..</text></g><g><title>word2vec::algo::train (650 samples, 4.04%)</title><rect x="95.9215%" y="709" width="4.0350%" height="15" fill="rgb(229,72,25)" fg:x="15452" fg:w="650"/><text x="96.1715%" y="719.50">word..</text></g><g><title>word2vec::algo::pass (642 samples, 3.99%)</title><rect x="95.9712%" y="693" width="3.9853%" height="15" fill="rgb(225,24,10)" fg:x="15460" fg:w="642"/><text x="96.2212%" y="703.50">word..</text></g><g><title>word2vec::algo::sigmoid (17 samples, 0.11%)</title><rect x="99.8510%" y="677" width="0.1055%" height="15" fill="rgb(234,27,7)" fg:x="16085" fg:w="17"/><text x="100.1010%" y="687.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::exp (17 samples, 0.11%)</title><rect x="99.8510%" y="661" width="0.1055%" height="15" fill="rgb(242,66,13)" fg:x="16085" fg:w="17"/><text x="100.1010%" y="671.50"></text></g><g><title>__expf_fma (17 samples, 0.11%)</title><rect x="99.8510%" y="645" width="0.1055%" height="15" fill="rgb(246,8,23)" fg:x="16085" fg:w="17"/><text x="100.1010%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="99.9565%" y="597" width="0.0186%" height="15" fill="rgb(250,79,46)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (3 samples, 0.02%)</title><rect x="99.9565%" y="581" width="0.0186%" height="15" fill="rgb(226,204,40)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="99.9565%" y="565" width="0.0186%" height="15" fill="rgb(213,176,28)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="99.9565%" y="549" width="0.0186%" height="15" fill="rgb(230,67,1)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3 samples, 0.02%)</title><rect x="99.9565%" y="533" width="0.0186%" height="15" fill="rgb(207,101,11)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="543.50"></text></g><g><title>word2vec::algo::CBOWParams::create_matrices::{{closure}} (3 samples, 0.02%)</title><rect x="99.9565%" y="517" width="0.0186%" height="15" fill="rgb(249,58,7)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.02%)</title><rect x="99.9565%" y="501" width="0.0186%" height="15" fill="rgb(220,97,11)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="99.9565%" y="485" width="0.0186%" height="15" fill="rgb(206,171,41)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="99.9565%" y="469" width="0.0186%" height="15" fill="rgb(214,196,36)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="99.9565%" y="453" width="0.0186%" height="15" fill="rgb(245,8,54)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="99.9565%" y="437" width="0.0186%" height="15" fill="rgb(212,188,53)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.02%)</title><rect x="99.9565%" y="421" width="0.0186%" height="15" fill="rgb(248,81,11)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.02%)</title><rect x="99.9565%" y="405" width="0.0186%" height="15" fill="rgb(246,221,0)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.02%)</title><rect x="99.9565%" y="389" width="0.0186%" height="15" fill="rgb(235,215,22)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.02%)</title><rect x="99.9565%" y="373" width="0.0186%" height="15" fill="rgb(215,6,4)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3 samples, 0.02%)</title><rect x="99.9565%" y="357" width="0.0186%" height="15" fill="rgb(250,144,27)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="367.50"></text></g><g><title>word2vec::algo::CBOWParams::create_matrices::{{closure}}::{{closure}} (3 samples, 0.02%)</title><rect x="99.9565%" y="341" width="0.0186%" height="15" fill="rgb(216,12,6)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="351.50"></text></g><g><title>&lt;rand_distr::normal::Normal&lt;F&gt; as rand::distributions::distribution::Distribution&lt;F&gt;&gt;::sample (3 samples, 0.02%)</title><rect x="99.9565%" y="325" width="0.0186%" height="15" fill="rgb(230,203,13)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="335.50"></text></g><g><title>rand::rng::Rng::sample (3 samples, 0.02%)</title><rect x="99.9565%" y="309" width="0.0186%" height="15" fill="rgb(216,227,23)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="319.50"></text></g><g><title>&lt;rand_distr::normal::StandardNormal as rand::distributions::distribution::Distribution&lt;f32&gt;&gt;::sample (3 samples, 0.02%)</title><rect x="99.9565%" y="293" width="0.0186%" height="15" fill="rgb(226,96,12)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="303.50"></text></g><g><title>&lt;rand_distr::normal::StandardNormal as rand::distributions::distribution::Distribution&lt;f64&gt;&gt;::sample (3 samples, 0.02%)</title><rect x="99.9565%" y="277" width="0.0186%" height="15" fill="rgb(216,207,2)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="287.50"></text></g><g><title>rand_distr::utils::ziggurat (3 samples, 0.02%)</title><rect x="99.9565%" y="261" width="0.0186%" height="15" fill="rgb(242,146,36)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="271.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (3 samples, 0.02%)</title><rect x="99.9565%" y="245" width="0.0186%" height="15" fill="rgb(239,221,50)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="255.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (3 samples, 0.02%)</title><rect x="99.9565%" y="229" width="0.0186%" height="15" fill="rgb(212,147,11)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="239.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (3 samples, 0.02%)</title><rect x="99.9565%" y="213" width="0.0186%" height="15" fill="rgb(221,70,27)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="223.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (3 samples, 0.02%)</title><rect x="99.9565%" y="197" width="0.0186%" height="15" fill="rgb(254,210,37)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="207.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (3 samples, 0.02%)</title><rect x="99.9565%" y="181" width="0.0186%" height="15" fill="rgb(216,113,46)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="191.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (3 samples, 0.02%)</title><rect x="99.9565%" y="165" width="0.0186%" height="15" fill="rgb(232,95,44)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="175.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (3 samples, 0.02%)</title><rect x="99.9565%" y="149" width="0.0186%" height="15" fill="rgb(251,158,24)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="159.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (3 samples, 0.02%)</title><rect x="99.9565%" y="133" width="0.0186%" height="15" fill="rgb(238,227,53)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="143.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (3 samples, 0.02%)</title><rect x="99.9565%" y="117" width="0.0186%" height="15" fill="rgb(205,111,21)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="127.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (3 samples, 0.02%)</title><rect x="99.9565%" y="101" width="0.0186%" height="15" fill="rgb(247,35,1)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="111.50"></text></g><g><title>rand_chacha::guts::round (3 samples, 0.02%)</title><rect x="99.9565%" y="85" width="0.0186%" height="15" fill="rgb(231,113,45)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="95.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (3 samples, 0.02%)</title><rect x="99.9565%" y="69" width="0.0186%" height="15" fill="rgb(253,97,19)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="79.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (3 samples, 0.02%)</title><rect x="99.9565%" y="53" width="0.0186%" height="15" fill="rgb(227,41,52)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="63.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (3 samples, 0.02%)</title><rect x="99.9565%" y="37" width="0.0186%" height="15" fill="rgb(215,79,25)" fg:x="16102" fg:w="3"/><text x="100.2065%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.04%)</title><rect x="99.9565%" y="629" width="0.0372%" height="15" fill="rgb(205,192,21)" fg:x="16102" fg:w="6"/><text x="100.2065%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.04%)</title><rect x="99.9565%" y="613" width="0.0372%" height="15" fill="rgb(251,196,3)" fg:x="16102" fg:w="6"/><text x="100.2065%" y="623.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (3 samples, 0.02%)</title><rect x="99.9752%" y="597" width="0.0186%" height="15" fill="rgb(214,27,25)" fg:x="16105" fg:w="3"/><text x="100.2252%" y="607.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.02%)</title><rect x="99.9752%" y="581" width="0.0186%" height="15" fill="rgb(210,2,18)" fg:x="16105" fg:w="3"/><text x="100.2252%" y="591.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="99.9752%" y="565" width="0.0186%" height="15" fill="rgb(251,21,12)" fg:x="16105" fg:w="3"/><text x="100.2252%" y="575.50"></text></g><g><title>all (16,109 samples, 100%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(232,85,48)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="1183.50"></text></g><g><title>w2v_bench-7586a (16,109 samples, 100.00%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(252,78,15)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="1167.50">w2v_bench-7586a</text></g><g><title>_start (16,109 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(251,148,51)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="1151.50">_start</text></g><g><title>__libc_start_main_impl (16,109 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(228,57,20)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="1135.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (16,109 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(254,19,8)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="1119.50">__libc_start_call_main</text></g><g><title>main (16,109 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(219,32,35)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="1103.50">main</text></g><g><title>std::rt::lang_start_internal (16,109 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(234,93,14)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="1087.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (16,109 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(237,144,4)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="1071.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (16,109 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(223,91,32)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="1055.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (16,109 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(220,214,23)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="1039.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (16,109 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(210,187,12)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (16,109 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(215,210,21)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (16,109 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(243,117,30)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (16,109 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(225,102,43)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (16,109 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(253,39,15)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="959.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (16,109 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(248,173,21)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="943.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (16,109 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(229,37,9)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="927.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (16,109 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(215,191,48)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="911.50">core::ops::function::FnOnce::call_once</text></g><g><title>w2v_bench::main (16,109 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(250,32,34)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="895.50">w2v_bench::main</text></g><g><title>w2v_bench::benches (16,109 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(217,178,13)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="879.50">w2v_bench::benches</text></g><g><title>w2v_bench::bench (16,109 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(234,62,7)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="863.50">w2v_bench::bench</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (16,109 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(238,222,14)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="847.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (16,109 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(242,42,48)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench</text></g><g><title>criterion::routine::Routine::profile (16,109 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(233,71,1)" fg:x="0" fg:w="16109"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (658 samples, 4.08%)</title><rect x="95.9153%" y="789" width="4.0847%" height="15" fill="rgb(210,124,37)" fg:x="15451" fg:w="658"/><text x="96.1653%" y="799.50">&lt;cri..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (658 samples, 4.08%)</title><rect x="95.9153%" y="773" width="4.0847%" height="15" fill="rgb(250,95,54)" fg:x="15451" fg:w="658"/><text x="96.1653%" y="783.50">crit..</text></g><g><title>w2v_bench::bench::{{closure}} (658 samples, 4.08%)</title><rect x="95.9153%" y="757" width="4.0847%" height="15" fill="rgb(247,80,37)" fg:x="15451" fg:w="658"/><text x="96.1653%" y="767.50">w2v_..</text></g><g><title>word2vec::algo::CBOWParams::create_matrices (7 samples, 0.04%)</title><rect x="99.9565%" y="741" width="0.0435%" height="15" fill="rgb(236,8,8)" fg:x="16102" fg:w="7"/><text x="100.2065%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (7 samples, 0.04%)</title><rect x="99.9565%" y="725" width="0.0435%" height="15" fill="rgb(209,123,22)" fg:x="16102" fg:w="7"/><text x="100.2065%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7 samples, 0.04%)</title><rect x="99.9565%" y="709" width="0.0435%" height="15" fill="rgb(253,69,48)" fg:x="16102" fg:w="7"/><text x="100.2065%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.04%)</title><rect x="99.9565%" y="693" width="0.0435%" height="15" fill="rgb(236,83,27)" fg:x="16102" fg:w="7"/><text x="100.2065%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (7 samples, 0.04%)</title><rect x="99.9565%" y="677" width="0.0435%" height="15" fill="rgb(247,63,49)" fg:x="16102" fg:w="7"/><text x="100.2065%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7 samples, 0.04%)</title><rect x="99.9565%" y="661" width="0.0435%" height="15" fill="rgb(216,102,24)" fg:x="16102" fg:w="7"/><text x="100.2065%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (7 samples, 0.04%)</title><rect x="99.9565%" y="645" width="0.0435%" height="15" fill="rgb(224,170,10)" fg:x="16102" fg:w="7"/><text x="100.2065%" y="655.50"></text></g></svg></svg>