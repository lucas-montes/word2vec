<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="12850"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (45 samples, 0.35%)</title><rect x="0.0156%" y="437" width="0.3502%" height="15" fill="rgb(213,203,36)" fg:x="2" fg:w="45"/><text x="0.2656%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (45 samples, 0.35%)</title><rect x="0.0156%" y="421" width="0.3502%" height="15" fill="rgb(253,198,7)" fg:x="2" fg:w="45"/><text x="0.2656%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (45 samples, 0.35%)</title><rect x="0.0156%" y="405" width="0.3502%" height="15" fill="rgb(246,180,11)" fg:x="2" fg:w="45"/><text x="0.2656%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (45 samples, 0.35%)</title><rect x="0.0156%" y="389" width="0.3502%" height="15" fill="rgb(210,86,7)" fg:x="2" fg:w="45"/><text x="0.2656%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (45 samples, 0.35%)</title><rect x="0.0156%" y="373" width="0.3502%" height="15" fill="rgb(246,145,36)" fg:x="2" fg:w="45"/><text x="0.2656%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (45 samples, 0.35%)</title><rect x="0.0156%" y="357" width="0.3502%" height="15" fill="rgb(244,228,49)" fg:x="2" fg:w="45"/><text x="0.2656%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (20 samples, 0.16%)</title><rect x="0.4280%" y="373" width="0.1556%" height="15" fill="rgb(221,133,31)" fg:x="55" fg:w="20"/><text x="0.6780%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20 samples, 0.16%)</title><rect x="0.4280%" y="357" width="0.1556%" height="15" fill="rgb(205,166,29)" fg:x="55" fg:w="20"/><text x="0.6780%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.16%)</title><rect x="0.4280%" y="341" width="0.1556%" height="15" fill="rgb(247,107,34)" fg:x="55" fg:w="20"/><text x="0.6780%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (20 samples, 0.16%)</title><rect x="0.4280%" y="325" width="0.1556%" height="15" fill="rgb(230,172,12)" fg:x="55" fg:w="20"/><text x="0.6780%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (20 samples, 0.16%)</title><rect x="0.4280%" y="309" width="0.1556%" height="15" fill="rgb(212,141,54)" fg:x="55" fg:w="20"/><text x="0.6780%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.16%)</title><rect x="0.4280%" y="293" width="0.1556%" height="15" fill="rgb(238,175,48)" fg:x="55" fg:w="20"/><text x="0.6780%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.16%)</title><rect x="0.4280%" y="277" width="0.1556%" height="15" fill="rgb(216,88,19)" fg:x="55" fg:w="20"/><text x="0.6780%" y="287.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.16%)</title><rect x="0.4280%" y="261" width="0.1556%" height="15" fill="rgb(226,102,16)" fg:x="55" fg:w="20"/><text x="0.6780%" y="271.50"></text></g><g><title>malloc (19 samples, 0.15%)</title><rect x="0.4358%" y="245" width="0.1479%" height="15" fill="rgb(235,209,19)" fg:x="56" fg:w="19"/><text x="0.6858%" y="255.50"></text></g><g><title>&lt;u32 as rand::distributions::utils::WideningMultiply&gt;::wmul (371 samples, 2.89%)</title><rect x="0.5837%" y="325" width="2.8872%" height="15" fill="rgb(216,131,18)" fg:x="75" fg:w="371"/><text x="0.8337%" y="335.50">&lt;u..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (120 samples, 0.93%)</title><rect x="3.5253%" y="181" width="0.9339%" height="15" fill="rgb(242,136,48)" fg:x="453" fg:w="120"/><text x="3.7753%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (120 samples, 0.93%)</title><rect x="3.5253%" y="165" width="0.9339%" height="15" fill="rgb(247,229,32)" fg:x="453" fg:w="120"/><text x="3.7753%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (120 samples, 0.93%)</title><rect x="3.5253%" y="149" width="0.9339%" height="15" fill="rgb(243,176,2)" fg:x="453" fg:w="120"/><text x="3.7753%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (120 samples, 0.93%)</title><rect x="3.5253%" y="133" width="0.9339%" height="15" fill="rgb(234,69,48)" fg:x="453" fg:w="120"/><text x="3.7753%" y="143.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (120 samples, 0.93%)</title><rect x="3.5253%" y="117" width="0.9339%" height="15" fill="rgb(246,78,41)" fg:x="453" fg:w="120"/><text x="3.7753%" y="127.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (121 samples, 0.94%)</title><rect x="3.5253%" y="213" width="0.9416%" height="15" fill="rgb(228,81,36)" fg:x="453" fg:w="121"/><text x="3.7753%" y="223.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (121 samples, 0.94%)</title><rect x="3.5253%" y="197" width="0.9416%" height="15" fill="rgb(215,210,38)" fg:x="453" fg:w="121"/><text x="3.7753%" y="207.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::choose_multiple (530 samples, 4.12%)</title><rect x="0.3658%" y="421" width="4.1245%" height="15" fill="rgb(213,188,5)" fg:x="47" fg:w="530"/><text x="0.6158%" y="431.50">&lt;[T]..</text></g><g><title>rand::seq::index::sample (523 samples, 4.07%)</title><rect x="0.4202%" y="405" width="4.0700%" height="15" fill="rgb(220,145,23)" fg:x="54" fg:w="523"/><text x="0.6702%" y="415.50">rand..</text></g><g><title>rand::seq::index::sample_floyd (523 samples, 4.07%)</title><rect x="0.4202%" y="389" width="4.0700%" height="15" fill="rgb(227,74,21)" fg:x="54" fg:w="523"/><text x="0.6702%" y="399.50">rand..</text></g><g><title>rand::rng::Rng::gen_range (502 samples, 3.91%)</title><rect x="0.5837%" y="373" width="3.9066%" height="15" fill="rgb(238,159,48)" fg:x="75" fg:w="502"/><text x="0.8337%" y="383.50">rand..</text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (502 samples, 3.91%)</title><rect x="0.5837%" y="357" width="3.9066%" height="15" fill="rgb(238,151,36)" fg:x="75" fg:w="502"/><text x="0.8337%" y="367.50">&lt;cor..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (502 samples, 3.91%)</title><rect x="0.5837%" y="341" width="3.9066%" height="15" fill="rgb(239,194,51)" fg:x="75" fg:w="502"/><text x="0.8337%" y="351.50">&lt;ran..</text></g><g><title>rand::rng::Rng::gen (131 samples, 1.02%)</title><rect x="3.4708%" y="325" width="1.0195%" height="15" fill="rgb(214,97,52)" fg:x="446" fg:w="131"/><text x="3.7208%" y="335.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (131 samples, 1.02%)</title><rect x="3.4708%" y="309" width="1.0195%" height="15" fill="rgb(235,164,44)" fg:x="446" fg:w="131"/><text x="3.7208%" y="319.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (131 samples, 1.02%)</title><rect x="3.4708%" y="293" width="1.0195%" height="15" fill="rgb(223,92,37)" fg:x="446" fg:w="131"/><text x="3.7208%" y="303.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (131 samples, 1.02%)</title><rect x="3.4708%" y="277" width="1.0195%" height="15" fill="rgb(210,91,12)" fg:x="446" fg:w="131"/><text x="3.7208%" y="287.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (131 samples, 1.02%)</title><rect x="3.4708%" y="261" width="1.0195%" height="15" fill="rgb(232,67,50)" fg:x="446" fg:w="131"/><text x="3.7208%" y="271.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (131 samples, 1.02%)</title><rect x="3.4708%" y="245" width="1.0195%" height="15" fill="rgb(234,40,11)" fg:x="446" fg:w="131"/><text x="3.7208%" y="255.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (131 samples, 1.02%)</title><rect x="3.4708%" y="229" width="1.0195%" height="15" fill="rgb(228,161,45)" fg:x="446" fg:w="131"/><text x="3.7208%" y="239.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (3 samples, 0.02%)</title><rect x="4.4669%" y="213" width="0.0233%" height="15" fill="rgb(222,76,21)" fg:x="574" fg:w="3"/><text x="4.7169%" y="223.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed (3 samples, 0.02%)</title><rect x="4.4669%" y="197" width="0.0233%" height="15" fill="rgb(231,99,39)" fg:x="574" fg:w="3"/><text x="4.7169%" y="207.50"></text></g><g><title>rand_core::SeedableRng::from_rng (3 samples, 0.02%)</title><rect x="4.4669%" y="181" width="0.0233%" height="15" fill="rgb(210,213,43)" fg:x="574" fg:w="3"/><text x="4.7169%" y="191.50"></text></g><g><title>&lt;&amp;mut R as rand_core::RngCore&gt;::try_fill_bytes (3 samples, 0.02%)</title><rect x="4.4669%" y="165" width="0.0233%" height="15" fill="rgb(244,194,36)" fg:x="574" fg:w="3"/><text x="4.7169%" y="175.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (3 samples, 0.02%)</title><rect x="4.4669%" y="149" width="0.0233%" height="15" fill="rgb(251,32,52)" fg:x="574" fg:w="3"/><text x="4.7169%" y="159.50"></text></g><g><title>getrandom::getrandom (3 samples, 0.02%)</title><rect x="4.4669%" y="133" width="0.0233%" height="15" fill="rgb(222,81,48)" fg:x="574" fg:w="3"/><text x="4.7169%" y="143.50"></text></g><g><title>getrandom::getrandom_uninit (3 samples, 0.02%)</title><rect x="4.4669%" y="117" width="0.0233%" height="15" fill="rgb(216,120,54)" fg:x="574" fg:w="3"/><text x="4.7169%" y="127.50"></text></g><g><title>getrandom::imp::getrandom_inner (3 samples, 0.02%)</title><rect x="4.4669%" y="101" width="0.0233%" height="15" fill="rgb(229,9,6)" fg:x="574" fg:w="3"/><text x="4.7169%" y="111.50"></text></g><g><title>getrandom::util_libc::sys_fill_exact (3 samples, 0.02%)</title><rect x="4.4669%" y="85" width="0.0233%" height="15" fill="rgb(249,103,12)" fg:x="574" fg:w="3"/><text x="4.7169%" y="95.50"></text></g><g><title>core::ops::function::Fn::call (3 samples, 0.02%)</title><rect x="4.4669%" y="69" width="0.0233%" height="15" fill="rgb(209,193,51)" fg:x="574" fg:w="3"/><text x="4.7169%" y="79.50"></text></g><g><title>getrandom::util_libc::getrandom_syscall (3 samples, 0.02%)</title><rect x="4.4669%" y="53" width="0.0233%" height="15" fill="rgb(241,118,47)" fg:x="574" fg:w="3"/><text x="4.7169%" y="63.50"></text></g><g><title>syscall (3 samples, 0.02%)</title><rect x="4.4669%" y="37" width="0.0233%" height="15" fill="rgb(219,133,35)" fg:x="574" fg:w="3"/><text x="4.7169%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (10,622 samples, 82.66%)</title><rect x="4.4903%" y="421" width="82.6615%" height="15" fill="rgb(219,43,17)" fg:x="577" fg:w="10622"/><text x="4.7403%" y="431.50">core::iter::traits::iterator::Iterator::sum</text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (10,622 samples, 82.66%)</title><rect x="4.4903%" y="405" width="82.6615%" height="15" fill="rgb(241,207,12)" fg:x="577" fg:w="10622"/><text x="4.7403%" y="415.50">&lt;f32 as core::iter::traits::accum::Sum&gt;::sum</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,622 samples, 82.66%)</title><rect x="4.4903%" y="389" width="82.6615%" height="15" fill="rgb(206,131,8)" fg:x="577" fg:w="10622"/><text x="4.7403%" y="399.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,622 samples, 82.66%)</title><rect x="4.4903%" y="373" width="82.6615%" height="15" fill="rgb(206,166,46)" fg:x="577" fg:w="10622"/><text x="4.7403%" y="383.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (10,622 samples, 82.66%)</title><rect x="4.4903%" y="357" width="82.6615%" height="15" fill="rgb(246,164,10)" fg:x="577" fg:w="10622"/><text x="4.7403%" y="367.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (10,622 samples, 82.66%)</title><rect x="4.4903%" y="341" width="82.6615%" height="15" fill="rgb(246,110,44)" fg:x="577" fg:w="10622"/><text x="4.7403%" y="351.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (10,622 samples, 82.66%)</title><rect x="4.4903%" y="325" width="82.6615%" height="15" fill="rgb(240,196,46)" fg:x="577" fg:w="10622"/><text x="4.7403%" y="335.50">&lt;f32 as core::iter::traits::accum::Sum&gt;::sum::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::take::Take&lt;core::iter::adapters::filter::Filter&lt;rand::seq::SliceChooseIter&lt;[usize],usize&gt;,word2vec::algo::pass::{{closure}}&gt;&gt;&gt; (51 samples, 0.40%)</title><rect x="87.1518%" y="421" width="0.3969%" height="15" fill="rgb(208,219,0)" fg:x="11199" fg:w="51"/><text x="87.4018%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter::Filter&lt;rand::seq::SliceChooseIter&lt;[usize],usize&gt;,word2vec::algo::pass::{{closure}}&gt;&gt; (51 samples, 0.40%)</title><rect x="87.1518%" y="405" width="0.3969%" height="15" fill="rgb(235,195,0)" fg:x="11199" fg:w="51"/><text x="87.4018%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;rand::seq::SliceChooseIter&lt;[usize],usize&gt;&gt; (51 samples, 0.40%)</title><rect x="87.1518%" y="389" width="0.3969%" height="15" fill="rgb(214,184,41)" fg:x="11199" fg:w="51"/><text x="87.4018%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;rand::seq::index::IndexVecIntoIter&gt; (51 samples, 0.40%)</title><rect x="87.1518%" y="373" width="0.3969%" height="15" fill="rgb(247,33,20)" fg:x="11199" fg:w="51"/><text x="87.4018%" y="383.50"></text></g><g><title>free (49 samples, 0.38%)</title><rect x="87.1673%" y="357" width="0.3813%" height="15" fill="rgb(227,84,24)" fg:x="11201" fg:w="49"/><text x="87.4173%" y="367.50"></text></g><g><title>_int_free (39 samples, 0.30%)</title><rect x="87.2451%" y="341" width="0.3035%" height="15" fill="rgb(230,170,40)" fg:x="11211" fg:w="39"/><text x="87.4951%" y="351.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::ln (515 samples, 4.01%)</title><rect x="87.5486%" y="421" width="4.0078%" height="15" fill="rgb(211,151,36)" fg:x="11250" fg:w="515"/><text x="87.7986%" y="431.50">std:..</text></g><g><title>__logf_fma (515 samples, 4.01%)</title><rect x="87.5486%" y="405" width="4.0078%" height="15" fill="rgb(251,130,21)" fg:x="11250" fg:w="515"/><text x="87.7986%" y="415.50">__lo..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (12,286 samples, 95.61%)</title><rect x="0.0078%" y="485" width="95.6109%" height="15" fill="rgb(254,127,35)" fg:x="1" fg:w="12286"/><text x="0.2578%" y="495.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>w2v_bench::bench::{{closure}}::{{closure}} (12,286 samples, 95.61%)</title><rect x="0.0078%" y="469" width="95.6109%" height="15" fill="rgb(239,29,36)" fg:x="1" fg:w="12286"/><text x="0.2578%" y="479.50">w2v_bench::bench::{{closure}}::{{closure}}</text></g><g><title>word2vec::algo::train (12,286 samples, 95.61%)</title><rect x="0.0078%" y="453" width="95.6109%" height="15" fill="rgb(221,88,23)" fg:x="1" fg:w="12286"/><text x="0.2578%" y="463.50">word2vec::algo::train</text></g><g><title>word2vec::algo::pass (12,240 samples, 95.25%)</title><rect x="0.3658%" y="437" width="95.2529%" height="15" fill="rgb(219,185,7)" fg:x="47" fg:w="12240"/><text x="0.6158%" y="447.50">word2vec::algo::pass</text></g><g><title>word2vec::algo::sigmoid (522 samples, 4.06%)</title><rect x="91.5564%" y="421" width="4.0623%" height="15" fill="rgb(220,72,12)" fg:x="11765" fg:w="522"/><text x="91.8064%" y="431.50">word..</text></g><g><title>std::f32::&lt;impl f32&gt;::exp (522 samples, 4.06%)</title><rect x="91.5564%" y="405" width="4.0623%" height="15" fill="rgb(212,1,48)" fg:x="11765" fg:w="522"/><text x="91.8064%" y="415.50">std:..</text></g><g><title>__expf_fma (522 samples, 4.06%)</title><rect x="91.5564%" y="389" width="4.0623%" height="15" fill="rgb(213,204,31)" fg:x="11765" fg:w="522"/><text x="91.8064%" y="399.50">__ex..</text></g><g><title>word2vec::algo::CBOWParams::create_matrices (3 samples, 0.02%)</title><rect x="95.6187%" y="485" width="0.0233%" height="15" fill="rgb(251,10,52)" fg:x="12287" fg:w="3"/><text x="95.8687%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.02%)</title><rect x="95.6187%" y="469" width="0.0233%" height="15" fill="rgb(223,208,42)" fg:x="12287" fg:w="3"/><text x="95.8687%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="95.6187%" y="453" width="0.0233%" height="15" fill="rgb(210,88,5)" fg:x="12287" fg:w="3"/><text x="95.8687%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="95.6187%" y="437" width="0.0233%" height="15" fill="rgb(250,175,11)" fg:x="12287" fg:w="3"/><text x="95.8687%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="95.6187%" y="421" width="0.0233%" height="15" fill="rgb(210,124,23)" fg:x="12287" fg:w="3"/><text x="95.8687%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="95.6187%" y="405" width="0.0233%" height="15" fill="rgb(205,227,48)" fg:x="12287" fg:w="3"/><text x="95.8687%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3 samples, 0.02%)</title><rect x="95.6187%" y="389" width="0.0233%" height="15" fill="rgb(216,84,11)" fg:x="12287" fg:w="3"/><text x="95.8687%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="95.6187%" y="373" width="0.0233%" height="15" fill="rgb(224,164,33)" fg:x="12287" fg:w="3"/><text x="95.8687%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="95.6265%" y="357" width="0.0156%" height="15" fill="rgb(241,109,39)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="95.6265%" y="341" width="0.0156%" height="15" fill="rgb(231,93,22)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (2 samples, 0.02%)</title><rect x="95.6265%" y="325" width="0.0156%" height="15" fill="rgb(220,117,19)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="95.6265%" y="309" width="0.0156%" height="15" fill="rgb(254,209,52)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="95.6265%" y="293" width="0.0156%" height="15" fill="rgb(229,155,34)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.02%)</title><rect x="95.6265%" y="277" width="0.0156%" height="15" fill="rgb(232,217,23)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="287.50"></text></g><g><title>word2vec::algo::CBOWParams::create_matrices::{{closure}} (2 samples, 0.02%)</title><rect x="95.6265%" y="261" width="0.0156%" height="15" fill="rgb(238,7,7)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.02%)</title><rect x="95.6265%" y="245" width="0.0156%" height="15" fill="rgb(242,210,4)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="95.6265%" y="229" width="0.0156%" height="15" fill="rgb(228,50,4)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="95.6265%" y="213" width="0.0156%" height="15" fill="rgb(252,159,14)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="95.6265%" y="197" width="0.0156%" height="15" fill="rgb(241,153,46)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="95.6265%" y="181" width="0.0156%" height="15" fill="rgb(219,61,24)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.02%)</title><rect x="95.6265%" y="165" width="0.0156%" height="15" fill="rgb(251,172,19)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="95.6265%" y="149" width="0.0156%" height="15" fill="rgb(225,152,18)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="95.6265%" y="133" width="0.0156%" height="15" fill="rgb(224,39,50)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="95.6265%" y="117" width="0.0156%" height="15" fill="rgb(236,177,34)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="127.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 0.02%)</title><rect x="95.6265%" y="101" width="0.0156%" height="15" fill="rgb(242,176,28)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="111.50"></text></g><g><title>word2vec::algo::CBOWParams::create_matrices::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="95.6265%" y="85" width="0.0156%" height="15" fill="rgb(239,161,9)" fg:x="12288" fg:w="2"/><text x="95.8765%" y="95.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (12,291 samples, 95.65%)</title><rect x="0.0000%" y="709" width="95.6498%" height="15" fill="rgb(209,90,3)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="719.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench</text></g><g><title>core::iter::traits::iterator::Iterator::collect (12,291 samples, 95.65%)</title><rect x="0.0000%" y="693" width="95.6498%" height="15" fill="rgb(244,181,51)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="703.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (12,291 samples, 95.65%)</title><rect x="0.0000%" y="677" width="95.6498%" height="15" fill="rgb(216,12,37)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="687.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12,291 samples, 95.65%)</title><rect x="0.0000%" y="661" width="95.6498%" height="15" fill="rgb(213,38,52)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="671.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (12,291 samples, 95.65%)</title><rect x="0.0000%" y="645" width="95.6498%" height="15" fill="rgb(210,222,0)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="655.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (12,291 samples, 95.65%)</title><rect x="0.0000%" y="629" width="95.6498%" height="15" fill="rgb(206,179,3)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="639.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (12,291 samples, 95.65%)</title><rect x="0.0000%" y="613" width="95.6498%" height="15" fill="rgb(231,50,45)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="623.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12,291 samples, 95.65%)</title><rect x="0.0000%" y="597" width="95.6498%" height="15" fill="rgb(205,176,39)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="607.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,291 samples, 95.65%)</title><rect x="0.0000%" y="581" width="95.6498%" height="15" fill="rgb(207,118,42)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="591.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,291 samples, 95.65%)</title><rect x="0.0000%" y="565" width="95.6498%" height="15" fill="rgb(221,131,33)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="575.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (12,291 samples, 95.65%)</title><rect x="0.0000%" y="549" width="95.6498%" height="15" fill="rgb(225,63,31)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="559.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (12,291 samples, 95.65%)</title><rect x="0.0000%" y="533" width="95.6498%" height="15" fill="rgb(247,180,4)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="543.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}}</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (12,291 samples, 95.65%)</title><rect x="0.0000%" y="517" width="95.6498%" height="15" fill="rgb(238,172,19)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="527.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}}</text></g><g><title>w2v_bench::bench::{{closure}} (12,291 samples, 95.65%)</title><rect x="0.0000%" y="501" width="95.6498%" height="15" fill="rgb(229,40,4)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="511.50">w2v_bench::bench::{{closure}}</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="95.6576%" y="613" width="0.0311%" height="15" fill="rgb(253,130,49)" fg:x="12292" fg:w="4"/><text x="95.9076%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (4 samples, 0.03%)</title><rect x="95.6576%" y="597" width="0.0311%" height="15" fill="rgb(214,101,14)" fg:x="12292" fg:w="4"/><text x="95.9076%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.03%)</title><rect x="95.6576%" y="581" width="0.0311%" height="15" fill="rgb(225,192,30)" fg:x="12292" fg:w="4"/><text x="95.9076%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.03%)</title><rect x="95.6576%" y="565" width="0.0311%" height="15" fill="rgb(239,24,16)" fg:x="12292" fg:w="4"/><text x="95.9076%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (4 samples, 0.03%)</title><rect x="95.6576%" y="549" width="0.0311%" height="15" fill="rgb(249,147,14)" fg:x="12292" fg:w="4"/><text x="95.9076%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (4 samples, 0.03%)</title><rect x="95.6576%" y="533" width="0.0311%" height="15" fill="rgb(234,104,5)" fg:x="12292" fg:w="4"/><text x="95.9076%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (19 samples, 0.15%)</title><rect x="95.6887%" y="549" width="0.1479%" height="15" fill="rgb(209,144,20)" fg:x="12296" fg:w="19"/><text x="95.9387%" y="559.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::choose_multiple (22 samples, 0.17%)</title><rect x="95.6887%" y="597" width="0.1712%" height="15" fill="rgb(238,37,14)" fg:x="12296" fg:w="22"/><text x="95.9387%" y="607.50"></text></g><g><title>rand::seq::index::sample (22 samples, 0.17%)</title><rect x="95.6887%" y="581" width="0.1712%" height="15" fill="rgb(209,166,27)" fg:x="12296" fg:w="22"/><text x="95.9387%" y="591.50"></text></g><g><title>rand::seq::index::sample_floyd (22 samples, 0.17%)</title><rect x="95.6887%" y="565" width="0.1712%" height="15" fill="rgb(212,78,42)" fg:x="12296" fg:w="22"/><text x="95.9387%" y="575.50"></text></g><g><title>rand::rng::Rng::gen_range (2 samples, 0.02%)</title><rect x="95.8444%" y="549" width="0.0156%" height="15" fill="rgb(241,225,32)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="559.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (2 samples, 0.02%)</title><rect x="95.8444%" y="533" width="0.0156%" height="15" fill="rgb(230,12,39)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="543.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (2 samples, 0.02%)</title><rect x="95.8444%" y="517" width="0.0156%" height="15" fill="rgb(213,132,2)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="527.50"></text></g><g><title>rand::rng::Rng::gen (2 samples, 0.02%)</title><rect x="95.8444%" y="501" width="0.0156%" height="15" fill="rgb(237,203,9)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="511.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (2 samples, 0.02%)</title><rect x="95.8444%" y="485" width="0.0156%" height="15" fill="rgb(252,49,11)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="495.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (2 samples, 0.02%)</title><rect x="95.8444%" y="469" width="0.0156%" height="15" fill="rgb(229,5,26)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="479.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (2 samples, 0.02%)</title><rect x="95.8444%" y="453" width="0.0156%" height="15" fill="rgb(225,181,50)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="463.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (2 samples, 0.02%)</title><rect x="95.8444%" y="437" width="0.0156%" height="15" fill="rgb(233,7,32)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="447.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (2 samples, 0.02%)</title><rect x="95.8444%" y="421" width="0.0156%" height="15" fill="rgb(214,102,49)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="431.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.02%)</title><rect x="95.8444%" y="405" width="0.0156%" height="15" fill="rgb(246,4,15)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="415.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.02%)</title><rect x="95.8444%" y="389" width="0.0156%" height="15" fill="rgb(250,181,17)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="399.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (2 samples, 0.02%)</title><rect x="95.8444%" y="373" width="0.0156%" height="15" fill="rgb(223,57,31)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="383.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (2 samples, 0.02%)</title><rect x="95.8444%" y="357" width="0.0156%" height="15" fill="rgb(248,31,34)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="367.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (2 samples, 0.02%)</title><rect x="95.8444%" y="341" width="0.0156%" height="15" fill="rgb(235,18,48)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="351.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (2 samples, 0.02%)</title><rect x="95.8444%" y="325" width="0.0156%" height="15" fill="rgb(232,23,29)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="335.50"></text></g><g><title>rand_chacha::guts::round (2 samples, 0.02%)</title><rect x="95.8444%" y="309" width="0.0156%" height="15" fill="rgb(218,229,26)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="319.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (2 samples, 0.02%)</title><rect x="95.8444%" y="293" width="0.0156%" height="15" fill="rgb(230,157,19)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (2 samples, 0.02%)</title><rect x="95.8444%" y="277" width="0.0156%" height="15" fill="rgb(245,78,48)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="287.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (2 samples, 0.02%)</title><rect x="95.8444%" y="261" width="0.0156%" height="15" fill="rgb(221,112,12)" fg:x="12316" fg:w="2"/><text x="96.0944%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (457 samples, 3.56%)</title><rect x="95.8599%" y="597" width="3.5564%" height="15" fill="rgb(246,107,31)" fg:x="12318" fg:w="457"/><text x="96.1099%" y="607.50">core..</text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (457 samples, 3.56%)</title><rect x="95.8599%" y="581" width="3.5564%" height="15" fill="rgb(205,186,3)" fg:x="12318" fg:w="457"/><text x="96.1099%" y="591.50">&lt;f32..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (457 samples, 3.56%)</title><rect x="95.8599%" y="565" width="3.5564%" height="15" fill="rgb(214,56,18)" fg:x="12318" fg:w="457"/><text x="96.1099%" y="575.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (457 samples, 3.56%)</title><rect x="95.8599%" y="549" width="3.5564%" height="15" fill="rgb(219,68,41)" fg:x="12318" fg:w="457"/><text x="96.1099%" y="559.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (457 samples, 3.56%)</title><rect x="95.8599%" y="533" width="3.5564%" height="15" fill="rgb(250,52,44)" fg:x="12318" fg:w="457"/><text x="96.1099%" y="543.50">&lt;cor..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (457 samples, 3.56%)</title><rect x="95.8599%" y="517" width="3.5564%" height="15" fill="rgb(239,153,54)" fg:x="12318" fg:w="457"/><text x="96.1099%" y="527.50">core..</text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (457 samples, 3.56%)</title><rect x="95.8599%" y="501" width="3.5564%" height="15" fill="rgb(242,218,37)" fg:x="12318" fg:w="457"/><text x="96.1099%" y="511.50">&lt;f32..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::take::Take&lt;core::iter::adapters::filter::Filter&lt;rand::seq::SliceChooseIter&lt;[usize],usize&gt;,word2vec::algo::pass::{{closure}}&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="99.4163%" y="597" width="0.0233%" height="15" fill="rgb(239,16,1)" fg:x="12775" fg:w="3"/><text x="99.6663%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter::Filter&lt;rand::seq::SliceChooseIter&lt;[usize],usize&gt;,word2vec::algo::pass::{{closure}}&gt;&gt; (3 samples, 0.02%)</title><rect x="99.4163%" y="581" width="0.0233%" height="15" fill="rgb(205,207,37)" fg:x="12775" fg:w="3"/><text x="99.6663%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;rand::seq::SliceChooseIter&lt;[usize],usize&gt;&gt; (3 samples, 0.02%)</title><rect x="99.4163%" y="565" width="0.0233%" height="15" fill="rgb(207,127,6)" fg:x="12775" fg:w="3"/><text x="99.6663%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;rand::seq::index::IndexVecIntoIter&gt; (3 samples, 0.02%)</title><rect x="99.4163%" y="549" width="0.0233%" height="15" fill="rgb(227,207,26)" fg:x="12775" fg:w="3"/><text x="99.6663%" y="559.50"></text></g><g><title>free (3 samples, 0.02%)</title><rect x="99.4163%" y="533" width="0.0233%" height="15" fill="rgb(227,171,33)" fg:x="12775" fg:w="3"/><text x="99.6663%" y="543.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="99.4241%" y="517" width="0.0156%" height="15" fill="rgb(221,129,22)" fg:x="12776" fg:w="2"/><text x="99.6741%" y="527.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::ln (26 samples, 0.20%)</title><rect x="99.4397%" y="597" width="0.2023%" height="15" fill="rgb(218,95,19)" fg:x="12778" fg:w="26"/><text x="99.6897%" y="607.50"></text></g><g><title>__logf_fma (26 samples, 0.20%)</title><rect x="99.4397%" y="581" width="0.2023%" height="15" fill="rgb(234,37,33)" fg:x="12778" fg:w="26"/><text x="99.6897%" y="591.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (545 samples, 4.24%)</title><rect x="95.6576%" y="661" width="4.2412%" height="15" fill="rgb(234,183,18)" fg:x="12292" fg:w="545"/><text x="95.9076%" y="671.50">crite..</text></g><g><title>w2v_bench::bench::{{closure}}::{{closure}} (545 samples, 4.24%)</title><rect x="95.6576%" y="645" width="4.2412%" height="15" fill="rgb(233,119,45)" fg:x="12292" fg:w="545"/><text x="95.9076%" y="655.50">w2v_b..</text></g><g><title>word2vec::algo::train (545 samples, 4.24%)</title><rect x="95.6576%" y="629" width="4.2412%" height="15" fill="rgb(229,94,32)" fg:x="12292" fg:w="545"/><text x="95.9076%" y="639.50">word2..</text></g><g><title>word2vec::algo::pass (541 samples, 4.21%)</title><rect x="95.6887%" y="613" width="4.2101%" height="15" fill="rgb(221,88,18)" fg:x="12296" fg:w="541"/><text x="95.9387%" y="623.50">word2..</text></g><g><title>word2vec::algo::sigmoid (33 samples, 0.26%)</title><rect x="99.6420%" y="597" width="0.2568%" height="15" fill="rgb(253,114,31)" fg:x="12804" fg:w="33"/><text x="99.8920%" y="607.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::exp (33 samples, 0.26%)</title><rect x="99.6420%" y="581" width="0.2568%" height="15" fill="rgb(239,57,23)" fg:x="12804" fg:w="33"/><text x="99.8920%" y="591.50"></text></g><g><title>__expf_fma (33 samples, 0.26%)</title><rect x="99.6420%" y="565" width="0.2568%" height="15" fill="rgb(217,100,27)" fg:x="12804" fg:w="33"/><text x="99.8920%" y="575.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::{{closure}} (5 samples, 0.04%)</title><rect x="99.9144%" y="117" width="0.0389%" height="15" fill="rgb(231,103,26)" fg:x="12839" fg:w="5"/><text x="100.1644%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.08%)</title><rect x="99.8988%" y="549" width="0.0778%" height="15" fill="rgb(237,113,13)" fg:x="12837" fg:w="10"/><text x="100.1488%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.06%)</title><rect x="99.9144%" y="533" width="0.0623%" height="15" fill="rgb(242,74,48)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.06%)</title><rect x="99.9144%" y="517" width="0.0623%" height="15" fill="rgb(211,202,34)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (8 samples, 0.06%)</title><rect x="99.9144%" y="501" width="0.0623%" height="15" fill="rgb(207,20,7)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.06%)</title><rect x="99.9144%" y="485" width="0.0623%" height="15" fill="rgb(220,148,41)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (8 samples, 0.06%)</title><rect x="99.9144%" y="469" width="0.0623%" height="15" fill="rgb(232,127,48)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="479.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (8 samples, 0.06%)</title><rect x="99.9144%" y="453" width="0.0623%" height="15" fill="rgb(225,223,2)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="463.50"></text></g><g><title>word2vec::algo::CBOWParams::create_matrices::{{closure}} (8 samples, 0.06%)</title><rect x="99.9144%" y="437" width="0.0623%" height="15" fill="rgb(235,87,7)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.06%)</title><rect x="99.9144%" y="421" width="0.0623%" height="15" fill="rgb(207,218,4)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.06%)</title><rect x="99.9144%" y="405" width="0.0623%" height="15" fill="rgb(234,177,26)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.06%)</title><rect x="99.9144%" y="389" width="0.0623%" height="15" fill="rgb(252,135,20)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.06%)</title><rect x="99.9144%" y="373" width="0.0623%" height="15" fill="rgb(243,37,4)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.06%)</title><rect x="99.9144%" y="357" width="0.0623%" height="15" fill="rgb(220,183,1)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (8 samples, 0.06%)</title><rect x="99.9144%" y="341" width="0.0623%" height="15" fill="rgb(219,101,20)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.06%)</title><rect x="99.9144%" y="325" width="0.0623%" height="15" fill="rgb(236,55,51)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.06%)</title><rect x="99.9144%" y="309" width="0.0623%" height="15" fill="rgb(213,107,22)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.06%)</title><rect x="99.9144%" y="293" width="0.0623%" height="15" fill="rgb(242,4,4)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (8 samples, 0.06%)</title><rect x="99.9144%" y="277" width="0.0623%" height="15" fill="rgb(215,48,38)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="287.50"></text></g><g><title>word2vec::algo::CBOWParams::create_matrices::{{closure}}::{{closure}} (8 samples, 0.06%)</title><rect x="99.9144%" y="261" width="0.0623%" height="15" fill="rgb(254,117,42)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="271.50"></text></g><g><title>&lt;rand_distr::normal::Normal&lt;F&gt; as rand::distributions::distribution::Distribution&lt;F&gt;&gt;::sample (8 samples, 0.06%)</title><rect x="99.9144%" y="245" width="0.0623%" height="15" fill="rgb(207,64,54)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="255.50"></text></g><g><title>rand::rng::Rng::sample (8 samples, 0.06%)</title><rect x="99.9144%" y="229" width="0.0623%" height="15" fill="rgb(251,159,50)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="239.50"></text></g><g><title>&lt;rand_distr::normal::StandardNormal as rand::distributions::distribution::Distribution&lt;f32&gt;&gt;::sample (8 samples, 0.06%)</title><rect x="99.9144%" y="213" width="0.0623%" height="15" fill="rgb(207,124,33)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="223.50"></text></g><g><title>&lt;rand_distr::normal::StandardNormal as rand::distributions::distribution::Distribution&lt;f64&gt;&gt;::sample (8 samples, 0.06%)</title><rect x="99.9144%" y="197" width="0.0623%" height="15" fill="rgb(220,64,15)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="207.50"></text></g><g><title>rand_distr::utils::ziggurat (8 samples, 0.06%)</title><rect x="99.9144%" y="181" width="0.0623%" height="15" fill="rgb(205,62,7)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="191.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (8 samples, 0.06%)</title><rect x="99.9144%" y="165" width="0.0623%" height="15" fill="rgb(212,69,0)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="175.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (8 samples, 0.06%)</title><rect x="99.9144%" y="149" width="0.0623%" height="15" fill="rgb(237,140,25)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="159.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (8 samples, 0.06%)</title><rect x="99.9144%" y="133" width="0.0623%" height="15" fill="rgb(248,66,8)" fg:x="12839" fg:w="8"/><text x="100.1644%" y="143.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (3 samples, 0.02%)</title><rect x="99.9533%" y="117" width="0.0233%" height="15" fill="rgb(219,31,20)" fg:x="12844" fg:w="3"/><text x="100.2033%" y="127.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (3 samples, 0.02%)</title><rect x="99.9533%" y="101" width="0.0233%" height="15" fill="rgb(226,41,40)" fg:x="12844" fg:w="3"/><text x="100.2033%" y="111.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (3 samples, 0.02%)</title><rect x="99.9533%" y="85" width="0.0233%" height="15" fill="rgb(241,181,35)" fg:x="12844" fg:w="3"/><text x="100.2033%" y="95.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (3 samples, 0.02%)</title><rect x="99.9533%" y="69" width="0.0233%" height="15" fill="rgb(247,217,26)" fg:x="12844" fg:w="3"/><text x="100.2033%" y="79.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (3 samples, 0.02%)</title><rect x="99.9533%" y="53" width="0.0233%" height="15" fill="rgb(246,111,34)" fg:x="12844" fg:w="3"/><text x="100.2033%" y="63.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_zeroupper (3 samples, 0.02%)</title><rect x="99.9533%" y="37" width="0.0233%" height="15" fill="rgb(209,154,29)" fg:x="12844" fg:w="3"/><text x="100.2033%" y="47.50"></text></g><g><title>all (12,850 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(240,69,19)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="1103.50"></text></g><g><title>w2v_bench-7586a (12,850 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(212,132,42)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="1087.50">w2v_bench-7586a</text></g><g><title>_start (12,850 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(249,109,5)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main_impl (12,850 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(239,145,34)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="1055.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (12,850 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(239,208,29)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="1039.50">__libc_start_call_main</text></g><g><title>main (12,850 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(254,83,43)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="1023.50">main</text></g><g><title>std::rt::lang_start_internal (12,850 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(212,38,51)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (12,850 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(216,88,50)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12,850 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(224,219,50)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (12,850 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(225,65,37)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (12,850 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(219,228,22)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (12,850 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(207,185,5)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12,850 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(254,50,18)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (12,850 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(245,201,16)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (12,850 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(217,186,28)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (12,850 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(213,73,43)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="863.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (12,850 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(223,81,20)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="847.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (12,850 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(236,199,33)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="831.50">core::ops::function::FnOnce::call_once</text></g><g><title>w2v_bench::main (12,850 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(221,51,1)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="815.50">w2v_bench::main</text></g><g><title>w2v_bench::benches (12,850 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(213,151,42)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="799.50">w2v_bench::benches</text></g><g><title>w2v_bench::bench (12,850 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(237,2,36)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="783.50">w2v_bench::bench</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (12,850 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(248,131,36)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="767.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (12,850 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(231,161,40)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="751.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench</text></g><g><title>criterion::routine::Routine::profile (12,850 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(225,81,34)" fg:x="0" fg:w="12850"/><text x="0.2500%" y="735.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (559 samples, 4.35%)</title><rect x="95.6498%" y="709" width="4.3502%" height="15" fill="rgb(229,207,44)" fg:x="12291" fg:w="559"/><text x="95.8998%" y="719.50">&lt;crit..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (559 samples, 4.35%)</title><rect x="95.6498%" y="693" width="4.3502%" height="15" fill="rgb(207,51,21)" fg:x="12291" fg:w="559"/><text x="95.8998%" y="703.50">crite..</text></g><g><title>w2v_bench::bench::{{closure}} (559 samples, 4.35%)</title><rect x="95.6498%" y="677" width="4.3502%" height="15" fill="rgb(243,160,0)" fg:x="12291" fg:w="559"/><text x="95.8998%" y="687.50">w2v_b..</text></g><g><title>word2vec::algo::CBOWParams::create_matrices (13 samples, 0.10%)</title><rect x="99.8988%" y="661" width="0.1012%" height="15" fill="rgb(239,127,11)" fg:x="12837" fg:w="13"/><text x="100.1488%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (13 samples, 0.10%)</title><rect x="99.8988%" y="645" width="0.1012%" height="15" fill="rgb(237,102,52)" fg:x="12837" fg:w="13"/><text x="100.1488%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (13 samples, 0.10%)</title><rect x="99.8988%" y="629" width="0.1012%" height="15" fill="rgb(239,148,4)" fg:x="12837" fg:w="13"/><text x="100.1488%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 0.10%)</title><rect x="99.8988%" y="613" width="0.1012%" height="15" fill="rgb(224,130,35)" fg:x="12837" fg:w="13"/><text x="100.1488%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (13 samples, 0.10%)</title><rect x="99.8988%" y="597" width="0.1012%" height="15" fill="rgb(212,29,13)" fg:x="12837" fg:w="13"/><text x="100.1488%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (13 samples, 0.10%)</title><rect x="99.8988%" y="581" width="0.1012%" height="15" fill="rgb(230,145,44)" fg:x="12837" fg:w="13"/><text x="100.1488%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (13 samples, 0.10%)</title><rect x="99.8988%" y="565" width="0.1012%" height="15" fill="rgb(249,207,49)" fg:x="12837" fg:w="13"/><text x="100.1488%" y="575.50"></text></g><g><title>core::ptr::write (3 samples, 0.02%)</title><rect x="99.9767%" y="549" width="0.0233%" height="15" fill="rgb(227,20,43)" fg:x="12847" fg:w="3"/><text x="100.2267%" y="559.50"></text></g></svg></svg>